#!/usr/bin/env ruby
#
#
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
# see the file "COPYING".

require 'racc/static'
require 'optparse'

def main
  output = nil
  debug_parser = false
  make_logfile = false
  logfilename = nil
  make_executable = false
  rubypath = nil
  embed_runtime = false
  debug_flags = Racc::DebugFlags.new
  line_convert = true
  line_convert_all = false
  omit_action_call = true
  superclass = nil
  check_only = false
  verbose = false
  profiler = RaccProfiler.new(false)

  parser = OptionParser.new
  parser.banner = "Usage: #{File.basename($PROGRAM_NAME)} [options] <input>"
  parser.on('-o', '--output-file=PATH',
            'output file name [<input>.tab.rb]') do |name|
    output = name
  end
  parser.on('-t', '--debug', 'Outputs debugging parser.') do |fl|
    debug_parser = fl
  end
  parser.on('-g', 'Equivalent to -t (obsolete).') do |fl|
    warn 'racc -g is obsolete.  Use racc -t instead.' if $VERBOSE
    debug_parser = fl
  end
  parser.on('-v', '--verbose',
            'Creates <filename>.output log file.') do |fl|
    make_logfile = fl
  end
  parser.on('-O', '--log-file=PATH',
            'Log file name [<input>.output]') do |path|
    make_logfile = true
    logfilename = path
  end
  parser.on('-e', '--executable [RUBYPATH]', 'Makes executable parser.') do |path|
    make_executable = true
    rubypath = (path == 'ruby' ? nil : path)
  end
  parser.on('-E', '--embedded', 'Embeds Racc runtime in output.') do
    embed_runtime = true
  end
  parser.on('--line-convert-all', 'Converts line numbers of user codes.') do
    line_convert_all = true
  end
  parser.on('-l', '--no-line-convert', 'Never convert line numbers.') do
    line_convert = false
    line_convert_all = false
  end
  parser.on('-a', '--no-omit-actions', 'Never omit actions.') do
    omit_action_call = false
  end
  parser.on('--superclass=CLASSNAME',
            'Uses CLASSNAME instead of Racc::Parser.') do |name|
    superclass = name
  end
  parser.on('-C', '--check-only', 'Checks syntax and quit immediately.') do |fl|
    check_only = fl
  end
  parser.on('-S', '--output-status', 'Outputs internal status time to time.') do
    verbose = true
  end
  parser.on('-P', 'Enables generator profile') do
    profiler = RaccProfiler.new(true)
  end
  parser.on('-D flags', 'Flags for Racc debugging (do not use).') do |flags|
    debug_flags = Racc::DebugFlags.parse_option_string(flags)
  end
  # parser.on('--no-extensions', 'Run Racc without any Ruby extension.') {
  #  Racc.const_set :Racc_No_Extensions, true
  # }
  parser.on('--version', 'Prints version and quit.') do
    puts "racc version #{Racc::Version}"
    exit 0
  end
  parser.on('--runtime-version', 'Prints runtime version and quit.') do
    printf "racc runtime version %s; %s\n",
           Racc::Parser::Racc_Runtime_Version,
           if Racc::Parser.racc_runtime_type == 'ruby'
             format('ruby core version %s',
                    Racc::Parser::Racc_Runtime_Core_Version_R)
           else
             format('c core version %s',
                    Racc::Parser::Racc_Runtime_Core_Version_C)
           end
    exit 0
  end
  parser.on('--copyright', 'Prints copyright and quit.') do
    puts Racc::Copyright
    exit 0
  end
  parser.on('--help', 'Prints this message and quit.') do
    puts parser.help
    exit 1
  end
  begin
    parser.parse!
  rescue OptionParser::ParseError => err
    warn err.message
    warn parser.help
    exit 1
  end
  if ARGV.empty?
    warn 'no input'
    exit 1
  end
  if ARGV.size > 1
    warn 'too many input'
    exit 1
  end
  input = ARGV[0]

  begin
    warn 'Parsing grammar file...' if verbose
    result = profiler.section('parse') do
      parser = Racc::GrammarFileParser.new(debug_flags)
      parser.parse(File.read(input), File.basename(input))
    end
    if check_only
      warn 'syntax ok'
      exit 0
    end

    warn 'Generating LALR states...' if verbose
    states = profiler.section('nfa') do
      Racc::States.new(result.grammar).nfa
    end

    warn "Resolving #{states.size} states..." if verbose
    profiler.section('dfa') do
      states.dfa
    end

    warn 'Creating parser file...' if verbose
    params = result.params.dup
    # Overwrites parameters given by a grammar file with command line options.
    params.superclass = superclass if superclass
    params.omit_action_call = true if omit_action_call
    # From command line option
    if make_executable
      params.make_executable = true
      params.interpreter = rubypath
    end
    params.debug_parser = debug_parser
    params.convert_line = line_convert
    params.convert_line_all = line_convert_all
    params.embed_runtime = embed_runtime
    profiler.section('generation') do
      generator = Racc::ParserFileGenerator.new(states, params)
      generator.generate_parser_file(output || make_filename(input, '.tab.rb'))
    end

    if make_logfile
      profiler.section('logging') do
        warn 'Creating log file...' if verbose
        logfilename ||= make_filename(output || File.basename(input), '.output')
        File.open(logfilename, 'w') do |f|
          Racc::LogFileGenerator.new(states, debug_flags).output f
        end
      end
    end
    if debug_flags.status_logging
      log_useless states.grammar
      log_conflict states
    else
      has_useless = report_useless states.grammar
      has_conflicts = report_conflict states
      if has_useless || has_conflicts
        preamble = make_logfile ? 'C' : 'Turn on logging with "-v" and c'
        warn %(#{preamble}heck ".output" file for details)
      end
    end

    profiler.report
  rescue Racc::Error, Errno::ENOENT, Errno::EPERM => err
    raise if $DEBUG or debug_flags.any?
    lineno = err.message.slice(/\A\d+:/).to_s
    warn "#{File.basename $PROGRAM_NAME}: #{input}:#{lineno} #{err.message.strip}"
    exit 1
  end
end

def make_filename(path, suffix)
  path.sub(/(?:\..*?)?\z/, suffix)
end

LIST_LIMIT = 10
def report_list(enum, label)
  c = enum.count
  if c > 0
    warn "#{c} #{label}:"
    enum.first(LIST_LIMIT).each do |item|
      warn "  #{yield item}"
    end
    warn '  ...' if c > LIST_LIMIT
  end
end

# @return [Boolean] if anything was reported
def report_conflict(states)
  if states.should_report_srconflict?
    reported = true
    warn "#{states.n_srconflicts} shift/reduce conflicts"
  end
  if states.rrconflict_exist?
    reported = true
    warn "#{states.n_rrconflicts} reduce/reduce conflicts"
  end
  reported
end

def log_conflict(states)
  logging('w') do |f|
    f.puts "ex#{states.grammar.n_expected_srconflicts}"
    f.puts "sr#{states.n_srconflicts}" if states.should_report_srconflict?
    f.puts "rr#{states.n_rrconflicts}" if states.rrconflict_exist?
  end
end

# @return [Boolean] if anything was reported
def report_useless(grammar)
  reported = report_list(grammar.each_useless_nonterminal, 'useless nonterminals', &:to_s)

  reported ||= report_list(grammar.each_useless_rule, 'useless rules') { |r| "##{r.ident} (#{r.target})" }

  if grammar.start.useless?
    warn 'fatal: start symbol does not derive any sentence'
    reported = true
  end
  reported
end

def log_useless(grammar)
  logging('a') do |f|
    f.puts "un#{grammar.n_useless_nonterminals}" if grammar.useless_nonterminal_exist?
    f.puts "ur#{grammar.n_useless_rules}" if grammar.useless_rule_exist?
  end
end

def logging(mode, &block)
  File.open("log/#{File.basename(ARGV[0])}", mode, &block)
end

class RaccProfiler
  def initialize(really)
    @really = really
    @log = []
    @class = if ::Process.respond_to?(:times)
               ::Process
             else
               # Ruby 1.6
               ::Time
    end
  end

  def section(name)
    if @really
      t1 = @class.times.utime
      result = yield
      t2 = @class.times.utime
      @log.push [name, t2 - t1]
      result
    else
      yield
    end
  end

  def report
    return unless @really
    f = $stderr
    total = cumulative_time
    f.puts '--task-----------+--sec------+---%-'
    @log.each do |name, time|
      f.printf "%-19s %s %3d%%\n", name, pjust(time, 4, 4), (time / total * 100).to_i
    end
    f.puts '-----------------+-----------+-----'
    f.printf "%-20s%s\n", 'total', pjust(total, 4, 4)
  end

  private

  def cumulative_time
    t = @log.inject(0) { |sum, (_name, time)| sum + time }
    t == 0 ? 0.01 : t
  end

  def pjust(num, i, j)
    m = /(\d+)(\.\d+)?/.match(num.to_s)
    str = m[1].rjust(i)
    str.concat m[2].ljust(j + 1)[0, j + 1] if m[2]
    str
  end
end

main
